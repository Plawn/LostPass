{"version":3,"sources":["components/common/LoadingComponent/LoadingComponent.tsx","api/api.ts","components/common/form/SelectField/SelectField.tsx","components/common/form/TextField/TextField.tsx","components/common/form/MultiLineTextField/MultiLineTextField.tsx","components/common/form/FormikTextField/FormikTextField.tsx","utils/utils.ts","components/common/Button/Button.tsx","components/pages/NewToken.tsx","components/pages/ViewToken.tsx","components/common/PageContainer/CenteredCard.tsx","components/common/Router/Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadingComponent","props","loading","style","width","height","display","justifyContent","alignItems","CircularProgress","children","createToken","content","ttl","a","linksNumber","headers","Headers","append","fetch","method","body","JSON","stringify","links_number","res","json","result","tokens","verifyToken","token","encodeURI","valid","retrieveContent","useStyles","makeStyles","theme","icon","color","palette","primary","main","root","flexWrap","borderColor","menuItem","backgroundColor","formControl","margin","spacing","inputLabel","SelectField","options","useState","initialValue","value","setValue","renderedOptions","useMemo","map","e","label","classes","uid","useUID","FormControl","variant","className","InputLabel","htmlFor","Select","id","onChange","event","target","form","setFieldValue","field","name","renderValue","option","MenuItem","key","TextField","inputProps","textAlign","multiLineField","background","MultiLineTextField","multiline","rowsMax","rows","FormikTextField","FormikMultiLineTextField","Button","durationOptions","linksNumberOptions","size","startAt","Array","keys","i","range","makeViewLink","document","location","origin","TokenComponent","url","InputProps","readOnly","text","IconButton","component","initialValues","TokenForm","setTokens","setLoading","handleTokenCreation","Typography","onSubmit","values","undefined","render","placeholder","type","CopyAllLinks","memo","urls","join","NewToken","length","onClick","Bold","fontWeight","InvalidToken","htmlColor","ValidToken","handleGetContent","TokenViewer","ViewToken","match","params","setValid","loadData","useCallback","isValid","useEffect","CenteredCard","Grid","container","justify","Paper","padding","minWidth","MyRouter","path","createMuiTheme","ThemeProvider","CssBaseline","Boolean","window","hostname","ReactDOM","StrictMode","App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f770619.chunk.js","sourcesContent":["import React, { ReactNode } from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\n\ntype Props = {\n\tloading: boolean;\n\tchildren: ReactNode;\n};\n\nexport const LoadingComponent: React.FC<Props> = props => (\n\tprops.loading ? (\n\t\t<div style={{ width: \"100%\", height: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n\t\t\t<CircularProgress />\n\t\t</div>\n\t)\n\t\t: (\n\t\t\t<>{props.children}</>\n\t\t)\n);\n\n","\n\nexport const createToken = async (content: string, ttl: number, linksNumber = 1) => {\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"Accept\", \"application/json\");\n    const res = await fetch('/api/new',\n        {\n            method: 'POST',\n            headers,\n            body: JSON.stringify({ content, ttl, links_number: linksNumber })\n        }\n    );\n    const result: { tokens: string[] } = await res.json();\n    return result.tokens;\n};\n\n\nexport const verifyToken = async (token: string) => {\n    const res = await fetch(`/api/preview/${encodeURI(token)}`)\n    const result: { valid: boolean } = await res.json();\n    return result.valid;\n}\n\nexport const retrieveContent = async (token: string) => {\n    const res = await fetch(`/api/view/${encodeURI(token)}`)\n    const result: { content: string } = await res.json();\n    return result.content;\n}","import React, { ChangeEvent, useState, useMemo } from \"react\";\nimport { FormControl, Theme } from \"@material-ui/core\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { FormikProps } from \"formik\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { useUID } from 'react-uid';\n\ntype Props<T> = {\n\toptions: { label: string; value: T }[];\n\tform?: FormikProps<T>;\n\tfield?: { name: string; value: T };\n\tname?: string;\n\tlabel?: string;\n\tstyle?: any;\n\tonChange?: (event: ChangeEvent<{ label?: string; value: { value: T; label: string } }>) => void;\n\tinitialValue?: { label: string; value: T };\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n\ticon: {\n\t\tcolor: theme.palette.primary.main,\n\t},\n\troot: {\n\t\tcolor: theme.palette.primary.main,\n\t\tdisplay: \"flex\",\n\t\tflexWrap: \"wrap\",\n\t\t\"& $notchedOutline\": {\n\t\t\tborderColor: theme.palette.primary.main,\n\t\t},\n\t\t\"&:hover $notchedOutline\": {\n\t\t\tborderColor: theme.palette.primary.main,\n\t\t},\n\t\t\"&$focused $notchedOutline\": {\n\t\t\tborderColor: theme.palette.primary.main,\n\t\t},\n\t},\n\tmenuItem: {\n\t\t\"&:hover\": {\n\t\t\tbackgroundColor: theme.palette.primary.main + \"8C\",\n\t\t},\n\t},\n\tformControl: {\n\t\tmargin: theme.spacing(1),\n\t\twidth: 200,\n\t},\n\tinputLabel: {\n\t\tcolor: theme.palette.primary.main,\n\t},\n}));\n\n\n/**\n * /!\\ Warning this component may break with formik updates\n */\nconst SelectField = <T extends {}>(props: Props<T>) => {\n\tconst { options } = props;\n\tconst [value, setValue] = useState(props.initialValue || \"\");\n\n\tconst renderedOptions = useMemo(() => options.map(e => ({ label: e.label, value: e })), [options]);\n\n\tconst handleChange = (event: ChangeEvent<{ label?: string; value: { label: string; value: T } }>) => {\n\t\tsetValue(event.target.value.label || \"\");\n\t\tprops.form && props.form.setFieldValue(props.field!.name, event.target.value.value, true);\n\t\tprops.onChange && props.onChange(event);\n\t};\n\tconst classes = useStyles();\n\tconst uid = useUID();\n\treturn (\n\t\t<FormControl variant=\"outlined\" margin=\"dense\" className={classes.formControl} style={props.style}>\n\t\t\t<InputLabel classes={{ root: classes.inputLabel }} htmlFor={uid}>\n\t\t\t\t{props.label}\n\t\t\t</InputLabel>\n\t\t\t<Select\n\t\t\t\tid={uid}\n\t\t\t\tonChange={e => handleChange(e as ChangeEvent<{ label?: string; value: { value: T; label: string } }>)}\n\t\t\t\tvalue={value}\n\t\t\t\tclasses={{ icon: classes.icon }}\n\t\t\t\trenderValue={(value: any) => <>{value.label || value}</>}\n\t\t\t\tlabel={props.label}\n\t\t\t>\n\t\t\t\t{renderedOptions.map((option: any) => (\n\t\t\t\t\t<MenuItem value={option.value} className={classes.menuItem} key={option.label}>\n\t\t\t\t\t\t{option.label}\n\t\t\t\t\t</MenuItem>\n\t\t\t\t))}\n\t\t\t</Select>\n\t\t</FormControl>\n\t);\n};\n\nexport default SelectField;\n","import React from 'react';\nimport { TextField, TextFieldProps } from '@material-ui/core';\n\n\n\n\n\nexport default (props: TextFieldProps) => (\n    <TextField\n        {...props}\n        inputProps={{ style: { textAlign: 'center', ...props.style } }}\n        variant=\"outlined\"\n        margin=\"dense\"\n    />\n)\n\n","import React from 'react';\nimport { makeStyles, TextField, TextFieldProps } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    multiLineField: {\n        width: \"100%\",\n        margin: \"1rem 0\",\n        background: \"none\",\n    },\n});\n\ntype Props = TextFieldProps;\n\nconst MultiLineTextField = (props: Props) => {\n    const classes = useStyles();\n    return (\n        <TextField\n            {...props}\n            className={classes.multiLineField}\n            multiline\n            rowsMax={10}\n            rows={10}\n            variant=\"outlined\"\n        />\n    );\n}\n\nexport default MultiLineTextField;","import React from 'react';\nimport { FieldProps } from 'formik';\nimport TextField  from '../TextField/TextField';\nimport MultiLineTextField from '../MultiLineTextField/MultiLineTextField';\n\nexport const FormikTextField: React.FC<FieldProps> = (props) => <TextField {...props.field} {...props} />;\n\nexport const FormikMultiLineTextField: React.FC<FieldProps> = (props) => <MultiLineTextField {...props.field} {...props} />;","\nexport function range(size:number, startAt:number = 0):ReadonlyArray<number> {\n    return [...Array<number>(size).keys()].map(i => i + startAt);\n}\n\n// alternative kept here\n\ntype EditableInput = HTMLTextAreaElement | HTMLInputElement;\n\nconst selectText = (editableEl: EditableInput, selectionStart: number, selectionEnd: number) => {\n    const isIOS = navigator.userAgent.match(/ipad|ipod|iphone/i);\n    if (isIOS) {\n        const range = document.createRange();\n        range.selectNodeContents(editableEl);\n\n        const selection = window.getSelection()!; // current text selection\n        selection.removeAllRanges();\n        selection.addRange(range);\n        editableEl.setSelectionRange(selectionStart, selectionEnd);\n    } else {\n        editableEl.select();\n    }\n};\n\nexport const copyToClipboard = (value: string): void => {\n    const el = document.createElement('textarea'); // temporary element\n    el.value = value;\n\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    el.readOnly = true; // avoid iOs keyboard opening\n    el.contentEditable = 'true';\n\n    document.body.appendChild(el);\n\n    selectText(el, 0, value.length);\n\n    document.execCommand('copy');\n    document.body.removeChild(el);\n\n};","import React from 'react';\nimport { Button, ButtonProps } from '@material-ui/core';\n\n\nexport default (props: ButtonProps) => <Button {...props} variant=\"outlined\" />\n","import React, { useState, useMemo, memo } from 'react';\nimport { Typography, IconButton } from '@material-ui/core';\nimport { LoadingComponent } from '../common/LoadingComponent/LoadingComponent';\nimport { createToken } from '../../api/api';\nimport SelectField from '../common/form/SelectField/SelectField';\nimport { Form, Field, Formik } from 'formik';\nimport { FormikTextField, FormikMultiLineTextField } from '../common/form/FormikTextField/FormikTextField';\nimport { range } from '../../utils/utils';\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\nimport Button from '../common/Button/Button';\nimport TextField from '../common/form/TextField/TextField';\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nconst durationOptions = [\n    { label: 'Hour', value: 3600 },\n    { label: 'Day', value: 3600 * 24 },\n    { label: 'Week', value: 3600 * 24 * 7 },\n    { label: 'Never', value: 0 },\n]\n\nconst linksNumberOptions = range(10, 1).map(i => ({ label: `${i}`, value: i }));\n\nconst makeViewLink = (token: string) => document.location.origin + `/view/${encodeURI(token)}`;\n\nconst TokenComponent = ({ url }: { url: string }) => (\n    <div style={{ display: 'flex' }}>\n        <TextField value={url}\n            style={{ width: '100%' }}\n            InputProps={{ readOnly: true }}\n        />\n        <CopyToClipboard text={url}>\n            <IconButton component=\"span\">\n                <FileCopyOutlinedIcon />\n            </IconButton>\n        </CopyToClipboard>\n    </div>\n)\n\ntype Values = {\n    ttl?: number;\n    content: string;\n    linksNumber: number;\n}\n\nconst initialValues: Values = {\n    ttl: durationOptions[0].value,\n    content: '',\n    linksNumber: 1,\n};\n\nconst TokenForm = ({ setTokens, setLoading }: { setTokens: any, setLoading: any }) => {\n\n    const handleTokenCreation = async (content: string, ttl: number, linksNumber: number) => {\n        setTokens([]);\n        setLoading(true);\n        try {\n            const tokens = await createToken(content, ttl, linksNumber);\n            setTokens(tokens);\n        } catch (e) {\n\n        }\n        setLoading(false);\n    };\n\n    return (\n        <>\n            <Typography variant=\"h3\">\n                Share Secret Data\n            </Typography>\n            <Formik\n                initialValues={initialValues}\n                onSubmit={async values => {\n                    values.ttl !== undefined && handleTokenCreation(values.content, +values.ttl, +values.linksNumber);\n                }}\n                render={(values) =>\n                    <Form>\n                        <Field label=\"Content\" name=\"content\" placeholder=\"Enter your content here\" component={FormikMultiLineTextField} />\n                        <div>\n                            <Typography variant=\"h6\">\n                                TTL\n                            </Typography>\n                            <Field name=\"ttl\" placeholder=\"Duration in seconds\" component={FormikTextField} />\n                            <Field name=\"ttl\" options={durationOptions} label=\"ttl\" component={SelectField} initialValue={durationOptions[0].label} />\n                        </div>\n                        <div>\n                            <Typography variant=\"h6\">\n                                Number of links\n                            </Typography>\n                            <Field name=\"linksNumber\" placeholder=\"Number of links\" component={FormikTextField} />\n                            <Field name=\"linksNumber\" options={linksNumberOptions} label=\"Number of links\" component={SelectField} />\n                        </div>\n                        <br />\n                        <Button type=\"submit\">\n                            Share Secret\n                        </Button>\n                    </Form>\n                } />\n        </>\n    )\n};\n\nconst CopyAllLinks = memo(({ urls }: { urls: string[] }) => (\n    <div >\n        <Typography style={{display:'inline'}}>\n            Copy all\n        </Typography>\n        <CopyToClipboard text={urls.join(\"\\n\")}>\n            <IconButton component=\"span\">\n                <FileCopyOutlinedIcon />\n            </IconButton>\n        </CopyToClipboard>\n    </div>\n));\n\n\n\nconst NewToken = () => {\n\n\n    const [tokens, setTokens] = useState<string[]>([]);\n    const [loading, setLoading] = useState(false);\n\n    // doing so to add all copy on one click after\n    const urls = useMemo(() => tokens.map(makeViewLink), [tokens]);\n\n    return (\n        <LoadingComponent loading={loading}>\n            {tokens.length > 0 ?\n                <>\n                    {urls.map(url => <TokenComponent url={url} />)}\n                    <br />\n                    <CopyAllLinks urls={urls} />\n                    <br />\n                    <Button onClick={() => setTokens([])}>\n                        Share again\n                    </Button>\n                </>\n                :\n                <TokenForm setLoading={setLoading} setTokens={setTokens} />\n            }\n        </LoadingComponent>\n    )\n}\n\nexport default NewToken;","import React, { useState, useEffect, ReactNode, useCallback } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { LoadingComponent } from '../common/LoadingComponent/LoadingComponent';\nimport { Typography } from '@material-ui/core';\nimport MultiLineTextField from '../common/form/MultiLineTextField/MultiLineTextField';\nimport { retrieveContent, verifyToken } from '../../api/api';\nimport Button from '../common/Button/Button';\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\ntype RouteParams = {\n    token: string;\n}\n\ntype Props = RouteComponentProps<RouteParams>\n\nconst Bold: React.FC<{}> = ({ children }: { children?: ReactNode }) => <span style={{ fontWeight: 'bold' }}>{children}</span>;\n\nconst InvalidToken = () => {\n    return (\n        <Typography variant=\"h1\" >\n            Invalid {\" \"}\n            <NotInterestedIcon htmlColor=\"red\" style={{ height: '95%', width: '13%' }} />\n        </Typography>\n    );\n}\n\nconst ValidToken = ({ token }: { token: string }) => {\n    const [value, setValue] = useState<string | undefined>(undefined);\n    const [loading, setLoading] = useState(false);\n\n    const handleGetContent = async () => {\n        setLoading(true);\n        try {\n            const content = await retrieveContent(token);\n            setValue(content);\n        } catch (e) {\n\n        }\n        setLoading(false);\n    }\n\n    return (\n\n        <LoadingComponent loading={loading}>\n            {\n                value !== undefined ?\n                    <>\n                        <Typography variant=\"h3\" >\n                            Content\n                        </Typography>\n                        <MultiLineTextField value={value} placeholder=\"Empty\" InputProps={{ readOnly: true }} />\n                    </>\n                    :\n                    <>\n                        <Typography variant=\"h1\" >\n                            Valid {\" \"}\n                            <CheckCircleOutlinedIcon htmlColor=\"green\" style={{ height: '95%', width: '13%' }} />\n                        </Typography>\n                        <br />\n                        Do you want to see the content ?\n                        <br />\n                        <br />\n                        You can only see it <Bold>once !</Bold>\n                        <br />\n                        <br />\n                        <Button onClick={handleGetContent}>\n                            See Content\n                        </Button>\n                    </>\n            }\n        </LoadingComponent>\n\n    )\n}\n\nconst TokenViewer = ({ valid, token }: { valid?: boolean; token: string }) => (valid !== undefined ? (valid ? <ValidToken token={token} /> : <InvalidToken />) : null)\n\nconst ViewToken = (props: Props) => {\n    const token = props.match.params.token;\n    const [loading, setLoading] = useState(false);\n    const [valid, setValid] = useState<boolean | undefined>(undefined);\n\n    const loadData = useCallback(async () => {\n        setLoading(true);\n        try {\n            const isValid = await verifyToken(token);\n            setValid(isValid);\n        } catch (e) {\n\n        }\n        setLoading(false);\n    }, [token]);\n\n    useEffect(() => {\n        loadData();\n    }, [loadData]);\n\n    return (\n        <LoadingComponent loading={loading}>\n            <TokenViewer valid={valid} token={token} />\n        </LoadingComponent>\n    )\n}\n\nexport default ViewToken;","import React, { ReactNode } from 'react';\nimport { Grid, Paper } from '@material-ui/core';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\n\ntype Props = {\n    children: ReactNode;\n    style?: CSSProperties\n}\n\nconst CenteredCard: React.FC<Props> = ({ children, style }: Props) => (\n    <Grid container justify=\"center\" alignItems=\"center\" style={{ height: '100vh' }}>\n        <Paper style={{ textAlign: 'center', padding: '2%', minWidth: '30vw',margin:'1%',  ...style }}>\n            {children}\n        </Paper>\n    </Grid>\n);\n\n\nexport default CenteredCard;","import React from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport NewToken from '../../pages/NewToken';\nimport ViewToken from '../../pages/ViewToken';\nimport CenteredCard from '../PageContainer/CenteredCard';\n\n\nconst MyRouter = () => {\n    return (\n        <CenteredCard>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/view/:token\" component={ViewToken} />\n                    <Route path=\"/\" component={NewToken} />\n                </Switch>\n            </BrowserRouter>\n        </CenteredCard>\n    )\n}\n\n\nexport default MyRouter;","import React from 'react';\nimport MyRouter from './components/common/Router/Router';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { CssBaseline } from '@material-ui/core';\n\nconst theme = createMuiTheme();\n\nexport default () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <MyRouter />\n  </ThemeProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}