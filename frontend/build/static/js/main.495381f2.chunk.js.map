{"version":3,"sources":["components/common/LoadingComponent/LoadingComponent.tsx","components/common/Button/Button.tsx","components/common/Button/CopyToClipboard.tsx","components/common/form/TextField/TextField.tsx","components/pages/NewToken/oneToken.tsx","api/api.ts","components/common/form/SelectField/SelectField.tsx","components/common/form/MultiLineTextField/MultiLineTextField.tsx","components/common/form/FormikTextField/FormikTextField.tsx","components/pages/NewToken/tokenForm.tsx","utils/utils.ts","components/pages/NewToken/NewToken.tsx","components/pages/ViewToken/invalidToken.tsx","components/common/Text/Bold.tsx","components/pages/ViewToken/validToken.tsx","components/pages/ViewToken/ViewToken.tsx","components/common/PageContainer/CenteredCard.tsx","components/common/Router/Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadingComponent","props","loading","style","width","height","display","justifyContent","alignItems","CircularProgress","children","Button","variant","string","text","IconButton","component","TextField","inputProps","textAlign","margin","memo","url","value","InputProps","readOnly","CopyToClipboard","api","method","a","body","headers","Headers","append","fetch","JSON","stringify","res","ok","json","get","post","createToken","content","ttl","linksNumber","links_number","tokens","verifyToken","token","encodeURIComponent","valid","retrieveContent","useStyles","makeStyles","theme","icon","color","palette","primary","main","root","flexWrap","borderColor","menuItem","backgroundColor","formControl","spacing","inputLabel","SelectField","options","useState","initialValue","setValue","renderedOptions","useMemo","map","e","label","classes","uid","useUID","FormControl","className","InputLabel","htmlFor","Select","id","onChange","event","target","form","setFieldValue","field","name","renderValue","option","MenuItem","multiLineField","background","MultiLineTextField","multiline","rowsMax","rows","FormikTextField","FormikMultiLineTextField","durationOptions","linksNumberOptions","size","startAt","Array","keys","i","range","initialValues","setTokens","setLoading","handleTokenCreation","then","finally","Typography","onSubmit","values","undefined","render","placeholder","type","makeViewLink","document","location","origin","CopyAllLinks","urls","join","NewToken","AllUrls","length","onClick","htmlColor","Bold","fontWeight","ValidToken","setContent","catch","TokenViewer","ViewToken","match","params","setValid","loadData","useCallback","isValid","useEffect","CenteredCard","Grid","container","justify","Paper","padding","minWidth","MyRouter","path","createMuiTheme","ThemeProvider","CssBaseline","Boolean","window","hostname","ReactDOM","StrictMode","App","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.495381f2.chunk.js","sourcesContent":["import React, { ReactNode } from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\n\ntype Props = {\n\tloading: boolean;\n\tchildren: ReactNode;\n};\n\nexport const LoadingComponent: React.FC<Props> = props => (\n\tprops.loading ? (\n\t\t<div style={{ width: \"100%\", height: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n\t\t\t<CircularProgress />\n\t\t</div>\n\t)\n\t\t: (\n\t\t\t<>{props.children}</>\n\t\t)\n);\n\n","import React from 'react';\nimport { Button, ButtonProps } from '@material-ui/core';\n\n\nexport default (props: ButtonProps) => <Button {...props} variant=\"outlined\" />\n","import React from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { IconButton } from '@material-ui/core';\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\n\nexport default ({ string }: { string: string }) => (\n    <CopyToClipboard text={string}>\n        <IconButton component=\"span\">\n            <FileCopyOutlinedIcon />\n        </IconButton>\n    </CopyToClipboard>\n);","import React from 'react';\nimport { TextField, TextFieldProps } from '@material-ui/core';\n\n\n\n\n\nexport default (props: TextFieldProps) => (\n    <TextField\n        {...props}\n        inputProps={{ style: { textAlign: 'center', ...props.style } }}\n        variant=\"outlined\"\n        margin=\"dense\"\n    />\n)\n\n","import React, { memo } from 'react';\nimport TextField from '../../common/form/TextField/TextField';\nimport CopyToClipboard from '../../common/Button/CopyToClipboard';\n\nexport default memo(({ url }: { url: string }) => (\n    <div style={{ display: 'flex' }}>\n        <TextField value={url}\n            style={{ width: '100%' }}\n            InputProps={{ readOnly: true }}\n        />\n        <CopyToClipboard string={url} />\n    </div>\n));","\ntype Method = 'GET' | 'PUT' | 'POST' | 'DELETE'\n\nasync function api<T>(url: string, method: Method, body: any = null) {\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"Accept\", \"application/json\");\n    const res = await fetch(`/api${url}`,\n        {\n            method: method,\n            headers,\n            body: body ? JSON.stringify(body) : null\n        }\n    );\n    if (!res.ok) {\n        throw res;\n    }\n    return res.json() as Promise<T>;\n}\n\nasync function get<T>(url: string) { return api<T>(url, 'GET'); }\n\nasync function post<T>(url: string, body?: any) { return api<T>(url, 'POST', body); }\n\nexport const createToken = async (content: string, ttl: number, linksNumber = 1) => (await post<{ tokens: string[] }>('/new', { content, ttl, links_number: linksNumber })).tokens;\n\nexport const verifyToken = async (token: string) => (await get<{ valid: boolean }>(`/preview/${encodeURIComponent(token)}`)).valid;\n\nexport const retrieveContent = async (token: string) => (await get<{ content: string }>(`/view/${encodeURIComponent(token)}`)).content;\n","import React, { ChangeEvent, useState, useMemo } from \"react\";\nimport { FormControl, Theme } from \"@material-ui/core\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { FormikProps } from \"formik\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { useUID } from 'react-uid';\n\ntype Props<T> = {\n\toptions: { label: string; value: T }[];\n\tform?: FormikProps<T>;\n\tfield?: { name: string; value: T };\n\tname?: string;\n\tlabel?: string;\n\tstyle?: any;\n\tonChange?: (event: ChangeEvent<{ label?: string; value: { value: T; label: string } }>) => void;\n\tinitialValue?: { label: string; value: T };\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n\ticon: {\n\t\tcolor: theme.palette.primary.main,\n\t},\n\troot: {\n\t\tcolor: theme.palette.primary.main,\n\t\tdisplay: \"flex\",\n\t\tflexWrap: \"wrap\",\n\t\t\"& $notchedOutline\": {\n\t\t\tborderColor: theme.palette.primary.main,\n\t\t},\n\t\t\"&:hover $notchedOutline\": {\n\t\t\tborderColor: theme.palette.primary.main,\n\t\t},\n\t\t\"&$focused $notchedOutline\": {\n\t\t\tborderColor: theme.palette.primary.main,\n\t\t},\n\t},\n\tmenuItem: {\n\t\t\"&:hover\": {\n\t\t\tbackgroundColor: theme.palette.primary.main + \"8C\",\n\t\t},\n\t},\n\tformControl: {\n\t\tmargin: theme.spacing(1),\n\t\twidth: 200,\n\t},\n\tinputLabel: {\n\t\tcolor: theme.palette.primary.main,\n\t},\n}));\n\n\n/**\n * /!\\ Warning this component may break with formik updates\n */\nconst SelectField = <T extends {}>(props: Props<T>) => {\n\tconst { options } = props;\n\tconst [value, setValue] = useState(props.initialValue || \"\");\n\n\tconst renderedOptions = useMemo(() => options.map(e => ({ label: e.label, value: e })), [options]);\n\n\tconst handleChange = (event: ChangeEvent<{ label?: string; value: { label: string; value: T } }>) => {\n\t\tsetValue(event.target.value.label || \"\");\n\t\tprops.form && props.form.setFieldValue(props.field!.name, event.target.value.value, true);\n\t\tprops.onChange && props.onChange(event);\n\t};\n\tconst classes = useStyles();\n\tconst uid = useUID();\n\treturn (\n\t\t<FormControl variant=\"outlined\" margin=\"dense\" className={classes.formControl} style={props.style}>\n\t\t\t<InputLabel classes={{ root: classes.inputLabel }} htmlFor={uid}>\n\t\t\t\t{props.label}\n\t\t\t</InputLabel>\n\t\t\t<Select\n\t\t\t\tid={uid}\n\t\t\t\tonChange={e => handleChange(e as ChangeEvent<{ label?: string; value: { value: T; label: string } }>)}\n\t\t\t\tvalue={value}\n\t\t\t\tclasses={{ icon: classes.icon }}\n\t\t\t\trenderValue={(value: any) => <>{value.label || value}</>}\n\t\t\t\tlabel={props.label}\n\t\t\t>\n\t\t\t\t{renderedOptions.map((option: any) => (\n\t\t\t\t\t<MenuItem value={option.value} className={classes.menuItem} key={option.label}>\n\t\t\t\t\t\t{option.label}\n\t\t\t\t\t</MenuItem>\n\t\t\t\t))}\n\t\t\t</Select>\n\t\t</FormControl>\n\t);\n};\n\nexport default SelectField;\n","import React from 'react';\nimport { makeStyles, TextField, TextFieldProps } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    multiLineField: {\n        width: \"100%\",\n        margin: \"1rem 0\",\n        background: \"none\",\n    },\n});\n\ntype Props = TextFieldProps;\n\nconst MultiLineTextField = (props: Props) => {\n    const classes = useStyles();\n    return (\n        <TextField\n            {...props}\n            className={classes.multiLineField}\n            multiline\n            rowsMax={10}\n            rows={10}\n            variant=\"outlined\"\n        />\n    );\n}\n\nexport default MultiLineTextField;","import React from 'react';\nimport { FieldProps } from 'formik';\nimport TextField  from '../TextField/TextField';\nimport MultiLineTextField from '../MultiLineTextField/MultiLineTextField';\n\nexport const FormikTextField: React.FC<FieldProps> = (props) => <TextField {...props.field} {...props} />;\n\nexport const FormikMultiLineTextField: React.FC<FieldProps> = (props) => <MultiLineTextField {...props.field} {...props} />;","import React, { Dispatch, SetStateAction } from 'react';\nimport { createToken } from '../../../api/api';\nimport SelectField from '../../common/form/SelectField/SelectField';\nimport { Form, Field, Formik } from 'formik';\nimport { FormikTextField, FormikMultiLineTextField } from '../../common/form/FormikTextField/FormikTextField';\nimport { range } from '../../../utils/utils';\nimport { Typography } from '@material-ui/core';\nimport Button from '../../common/Button/Button';\n\ntype setState<T> = Dispatch<SetStateAction<T>>;\n\nconst durationOptions = [\n    { label: 'Hour', value: 3600 },\n    { label: 'Day', value: 3600 * 24 },\n    { label: 'Week', value: 3600 * 24 * 7 },\n    { label: 'Never', value: 0 },\n];\n\nconst linksNumberOptions = range(10, 1).map(i => ({ label: `${i}`, value: i }));\n\ntype Values = {\n    ttl?: number;\n    content: string;\n    linksNumber: number;\n}\n\nconst initialValues: Values = {\n    ttl: durationOptions[0].value,\n    content: '',\n    linksNumber: 1,\n};\n\nexport default ({ setTokens, setLoading }: { setTokens: setState<string[]>, setLoading: setState<boolean> }) => {\n\n    const handleTokenCreation = async (content: string, ttl: number, linksNumber: number) => {\n        setTokens([]);\n        setLoading(true);\n        createToken(content, ttl, linksNumber)\n            .then(setTokens)\n            .finally(() => setLoading(false));\n    };\n\n    return (\n        <>\n            <Typography variant=\"h3\">\n                Share Secret Data\n            </Typography>\n            <Formik\n                initialValues={initialValues}\n                onSubmit={async values => {\n                    values.ttl !== undefined && handleTokenCreation(values.content, +values.ttl, +values.linksNumber);\n                }}\n                render={() =>\n                    <Form>\n                        <Field label=\"Content\" name=\"content\" placeholder=\"Enter your content here\" component={FormikMultiLineTextField} />\n                        <div>\n                            <Typography variant=\"h6\">\n                                TTL\n                            </Typography>\n                            <Field name=\"ttl\" placeholder=\"Duration in seconds\" component={FormikTextField} />\n                            <Field name=\"ttl\" options={durationOptions} label=\"ttl\" component={SelectField} initialValue={durationOptions[0].label} />\n                        </div>\n                        <div>\n                            <Typography variant=\"h6\">\n                                Number of links\n                            </Typography>\n                            <Field name=\"linksNumber\" placeholder=\"Number of links\" component={FormikTextField} />\n                            <Field name=\"linksNumber\" options={linksNumberOptions} label=\"Number of links\" component={SelectField} />\n                        </div>\n                        <br />\n                        <Button type=\"submit\">\n                            Share Secret\n                        </Button>\n                    </Form>\n                } />\n        </>\n    )\n};","\nexport function range(size: number, startAt: number = 0): ReadonlyArray<number> {\n    return [...Array<number>(size).keys()].map(i => i + startAt);\n}","import React, { useState, useMemo, memo } from 'react';\nimport { Typography } from '@material-ui/core';\nimport { LoadingComponent } from '../../common/LoadingComponent/LoadingComponent';\nimport Button from '../../common/Button/Button';\nimport CopyToClipboard from '../../common/Button/CopyToClipboard';\nimport OneToken from './oneToken';\nimport TokenForm from './tokenForm';\n\nconst makeViewLink = (token: string) => document.location.origin + `/view/${encodeURIComponent(token)}`;\n\n\nconst CopyAllLinks = memo(({ urls }: { urls: string[] }) => (\n    <div>\n        <Typography style={{ display: 'inline' }}>\n            Copy all\n        </Typography>\n        <CopyToClipboard string={urls.join(\"\\n\")} />\n    </div>\n));\n\n\n\nconst NewToken = () => {\n    const [tokens, setTokens] = useState<string[]>([]);\n    const [loading, setLoading] = useState(false);\n\n    // doing so to add all copy on one click after\n    const urls = useMemo(() => tokens.map(makeViewLink), [tokens]);\n\n    // avoiding re-renders\n    const AllUrls = useMemo(() => (\n        <>\n            {urls.map(url => <OneToken key={url} url={url} />)}\n        </>\n    ), [urls]);\n\n    return (\n        <LoadingComponent loading={loading}>\n            {tokens.length > 0 ?\n                <>\n                    {AllUrls}\n                    <br />\n                    <CopyAllLinks urls={urls} />\n                    <br />\n                    <Button onClick={() => setTokens([])}>\n                        Share again\n                    </Button>\n                </>\n                :\n                <TokenForm setLoading={setLoading} setTokens={setTokens} />\n            }\n        </LoadingComponent>\n    )\n}\n\nexport default NewToken;","import React, { memo } from 'react';\nimport { Typography } from '@material-ui/core';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nexport default memo(() => (\n    <Typography variant=\"h1\" >\n        Invalid {\" \"}\n        <NotInterestedIcon htmlColor=\"red\" style={{ height: '95%', width: '13%' }} />\n    </Typography>\n));\n","import React, { ReactNode } from 'react';\n\nconst Bold: React.FC<{}> = ({ children }: { children?: ReactNode }) => <span style={{ fontWeight: 'bold' }}>{children}</span>;\n\nexport default Bold;","import React, { useState, memo } from 'react';\nimport { LoadingComponent } from '../../common/LoadingComponent/LoadingComponent';\nimport Bold from '../../common/Text/Bold';\nimport { Button, Typography } from '@material-ui/core';\nimport MultiLineTextField from '../../common/form/MultiLineTextField/MultiLineTextField';\nimport { retrieveContent } from '../../../api/api';\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\n\nconst ValidToken = memo(({ token }: { token: string }) => {\n    const [content, setContent] = useState<string | undefined>(undefined);\n    const [loading, setLoading] = useState(false);\n\n    const handleGetContent = () => {\n        setLoading(true);\n        retrieveContent(token)\n            .then(setContent)\n            .catch(() => setContent('Failed to fetch content'))\n            .finally(() => setLoading(false));\n    }\n\n    return (\n        <LoadingComponent loading={loading}>\n            {\n                content !== undefined ?\n                    <>\n                        <Typography variant=\"h3\" >\n                            Content\n                        </Typography>\n                        <MultiLineTextField value={content} placeholder=\"Empty\" InputProps={{ readOnly: true }} />\n                    </>\n                    :\n                    <>\n                        <Typography variant=\"h1\" >\n                            Valid {\" \"}\n                            <CheckCircleOutlinedIcon htmlColor=\"green\" style={{ height: '95%', width: '13%' }} />\n                        </Typography>\n                        <br />\n                        Do you want to see the content ?\n                        <br />\n                        <br />\n                        You can only see it <Bold>once !</Bold>\n                        <br />\n                        <br />\n                        <Button onClick={handleGetContent}>\n                            See Content\n                        </Button>\n                    </>\n            }\n        </LoadingComponent>\n    )\n});\n\nexport default ValidToken;","import React, { useState, useEffect, useCallback } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { LoadingComponent } from '../../common/LoadingComponent/LoadingComponent';\nimport { verifyToken } from '../../../api/api';\nimport InvalidToken from './invalidToken';\nimport ValidToken from './validToken';\n\ntype RouteParams = {\n    token: string;\n}\n\ntype Props = RouteComponentProps<RouteParams>;\n\nconst TokenViewer = ({ valid, token }: { valid?: boolean; token: string }) => (valid ? <ValidToken token={token} /> : <InvalidToken />)\n\nconst ViewToken = (props: Props) => {\n    const token = props.match.params.token;\n    const [loading, setLoading] = useState(false);\n    const [valid, setValid] = useState<boolean | undefined>(undefined);\n\n    const loadData = useCallback(() => {\n        setLoading(true);\n        verifyToken(token)\n            .then(isValid => setValid(isValid))\n            .catch(() => setValid(false))\n            .finally(() => setLoading(false));\n    }, [token]);\n\n    useEffect(() => {\n        loadData();\n    }, [loadData]);\n\n    return (\n        <LoadingComponent loading={loading || valid === undefined}>\n            <TokenViewer valid={valid} token={token} />\n        </LoadingComponent>\n    );\n}\n\nexport default ViewToken;","import React, { ReactNode } from 'react';\nimport { Grid, Paper } from '@material-ui/core';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\n\ntype Props = {\n    children: ReactNode;\n    style?: CSSProperties\n}\n\nconst CenteredCard: React.FC<Props> = ({ children, style }: Props) => (\n    <Grid container justify=\"center\" alignItems=\"center\" style={{ height: '100vh' }}>\n        <Paper style={{ textAlign: 'center', padding: '2%', minWidth: '30vw',margin:'1%',  ...style }}>\n            {children}\n        </Paper>\n    </Grid>\n);\n\n\nexport default CenteredCard;","import React from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport NewToken from '../../pages/NewToken/NewToken';\nimport ViewToken from '../../pages/ViewToken/ViewToken';\nimport CenteredCard from '../PageContainer/CenteredCard';\n\n\nconst MyRouter = () => {\n    return (\n        <CenteredCard>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/view/:token\" component={ViewToken} />\n                    <Route path=\"/\" component={NewToken} />\n                </Switch>\n            </BrowserRouter>\n        </CenteredCard>\n    )\n}\n\n\nexport default MyRouter;","import React from 'react';\nimport MyRouter from './components/common/Router/Router';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { CssBaseline } from '@material-ui/core';\n\nconst theme = createMuiTheme();\n\nexport default () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <MyRouter />\n  </ThemeProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}